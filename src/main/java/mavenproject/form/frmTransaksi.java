/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mavenproject.form;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.sql.*;
import java.text.MessageFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.sql.PreparedStatement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author user
 */
public class frmTransaksi extends JFrame {
	Connection Con;
	ResultSet RsBrg;
	ResultSet RsKons;
	Statement stm;
	double total=0;
	String tanggal;
	Boolean edit=false;
	DefaultTableModel tableModel = new DefaultTableModel(
		new Object [][] {},
		new String [] {
		"Kd Barang", "Nama Barang","Harga Barang","Jumlah","Total"
	});
    /**
     * Creates new form frmTransaksi
     */
    public frmTransaksi() {
      initComponents();
      open_db();
      nomor_jual();
      baca_konsumen();
      baca_barang();
      simpan_ditabel();
      inisialisasi_tabel();
      aktif(false);
      setTombol(true);
      txtTgl.setEditor(new JSpinner.DateEditor(txtTgl,"yyyy/MM/dd"));

      // Tambahkan ActionListener pada cmbKd_Kons
      cmbKd_Kons.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
        String selectedKode = (String) cmbKd_Kons.getSelectedItem();
        detail_konsumen(selectedKode);
        }
    });

        cmbKd_Brg.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
        String selectedKode = (String) cmbKd_Brg.getSelectedItem();
        detail_barang(selectedKode);
        }
    });

    // Tambahkan DocumentListener ke txtJual dan txtJml
        txtJual.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                hitung_jual();
            }
            public void removeUpdate(DocumentEvent e) {
                hitung_jual();
            }
            public void insertUpdate(DocumentEvent e) {
                hitung_jual();
            }
        });

        txtJml.getDocument().addDocumentListener(new DocumentListener() {
            public void changedUpdate(DocumentEvent e) {
                hitung_jual();
            }
            public void removeUpdate(DocumentEvent e) {
                hitung_jual();
            }
            public void insertUpdate(DocumentEvent e) {
                hitung_jual();
            }
        });

    }

    //method membuka database server, user, pass, database disesuaikan
private void open_db()
{
    try{
        Koneksi kon = new Koneksi("localhost:8889","root","root","PBO_Latihan11");
        Con = kon.getConnection();
        //System.out.println("Berhasil ");
    }catch (Exception e) {
        System.out.println("Error : "+e);
    }
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jLabel3 = new JLabel();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        cmbKd_Brg = new JComboBox<>();
        txtNm_Brg = new JTextField();
        txtJual = new JTextField();
        txtJml = new JTextField();
        txtTotal = new JTextField();
        txtNoJual = new JTextField();
        txtTgl = new JSpinner();
        cmbKd_Kons = new JComboBox<>();
        txtNm_Kons = new JTextField();
        cmdTambah = new JButton();
        cmdSimpan = new JButton();
        cmdCetak = new JButton();
        cmdHapusItem = new JButton();
        cmdBatal = new JButton();
        cmdKeluar = new JButton();
        btnPilih = new JButton();
        xKode = new JTextField();
        jScrollPane1 = new JScrollPane();
        tblJual = new JTable();
        jScrollPane2 = new JScrollPane();
        text = new JTextArea();
        jLabel6 = new JLabel();
        jLabel7 = new JLabel();
        jLabel8 = new JLabel();
        txtTotal_Akhir = new JTextField();
        txtBayar = new JTextField();
        txtKembali = new JTextField();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel1.setText("Transaksi");

        jLabel2.setText("No Jual");

        jLabel3.setText("Tanggal Jual");

        jLabel4.setText("Kode Konsumen");

        jLabel5.setText("Nama Konsumen");

        cmbKd_Brg.setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbKd_Brg.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmbKd_BrgActionPerformed(evt);
            }
        });

        txtTotal.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        txtTgl.setModel(new SpinnerDateModel());

        cmbKd_Kons.setModel(new DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbKd_Kons.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmbKd_KonsActionPerformed(evt);
            }
        });

        txtNm_Kons.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtNm_KonsActionPerformed(evt);
            }
        });

        cmdTambah.setText("Tambah");
        cmdTambah.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmdTambahActionPerformed(evt);
            }
        });

        cmdSimpan.setText("Simpan");
        cmdSimpan.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmdSimpanActionPerformed(evt);
            }
        });

        cmdCetak.setText("Cetak");
        cmdCetak.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmdCetakActionPerformed(evt);
            }
        });

        cmdHapusItem.setText("Hapus Item");
        cmdHapusItem.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmdHapusItemActionPerformed(evt);
            }
        });

        cmdBatal.setText("Batal");
        cmdBatal.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmdBatalActionPerformed(evt);
            }
        });

        cmdKeluar.setText("Keluar");
        cmdKeluar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cmdKeluarActionPerformed(evt);
            }
        });

        btnPilih.setText("Pilih Barang");
        btnPilih.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                btnPilihActionPerformed(evt);
            }
        });

        tblJual.setModel(new DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblJual);

        text.setColumns(20);
        text.setRows(5);
        jScrollPane2.setViewportView(text);

        jLabel6.setText("Total");

        jLabel7.setText("Bayar");

        jLabel8.setText("Kembali");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(295, 295, 295)
                .addComponent(jLabel1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtNoJual)
                            .addComponent(txtTgl, GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtNm_Kons, GroupLayout.PREFERRED_SIZE, 160, GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(cmbKd_Kons, GroupLayout.PREFERRED_SIZE, 163, GroupLayout.PREFERRED_SIZE)))
                        .addGap(73, 73, 73))
                    .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(cmdTambah)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmdSimpan)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdCetak)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdBatal)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmdKeluar)
                        .addGap(142, 142, 142))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, 440, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(35, 35, 35)
                                        .addComponent(txtTotal_Akhir))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel7)
                                            .addComponent(jLabel8))
                                        .addGap(15, 15, 15)
                                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                            .addComponent(txtKembali)
                                            .addComponent(txtBayar)))))
                            .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane1, GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmdHapusItem)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(btnPilih)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(xKode, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(cmbKd_Brg, GroupLayout.PREFERRED_SIZE, 142, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtNm_Brg, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtJual, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtJml, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtTotal, GroupLayout.PREFERRED_SIZE, 130, GroupLayout.PREFERRED_SIZE)))))
                        .addGap(14, 14, 14))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(txtNoJual, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbKd_Kons, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel5)
                    .addComponent(txtTgl, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNm_Kons, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbKd_Brg, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtNm_Brg, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtJual, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtJml, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTotal, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(cmdHapusItem)
                    .addComponent(btnPilih)
                    .addComponent(xKode, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 140, GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(cmdTambah)
                            .addComponent(cmdSimpan)
                            .addComponent(cmdCetak)
                            .addComponent(cmdBatal)
                            .addComponent(cmdKeluar)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(txtTotal_Akhir, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtBayar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtKembali, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //method hitung penjualan
private void hitung_jual()
{
        double xtot, xhrg;
        int xjml;

        try {
            xhrg = Double.parseDouble(txtJual.getText());
            xjml = Integer.parseInt(txtJml.getText());
            xtot = xhrg * xjml;
            String xtotal = Double.toString(xtot);
            txtTotal.setText(xtotal);
        } catch (NumberFormatException e) {
            // Jika teks tidak valid, kosongkan txtTot
            txtTotal.setText("");
        }
}

//methohd baca data konsumen
private void baca_konsumen(){
    DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();

        try {
            stm = Con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
            RsKons = stm.executeQuery("SELECT kd_kons, nm_kons FROM konsumen");

            while (RsKons.next()) {
                String kodeKonsumen = RsKons.getString("kd_kons");
                model.addElement(kodeKonsumen);
            }

            RsKons.close();
            stm.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }

        cmbKd_Kons.setModel(model);
}

private void baca_barang() {
DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
try {
    stm = Con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY);
    ResultSet RsBrg = stm.executeQuery("SELECT kd_brg FROM barang");

    while (RsBrg.next()) {
        String kodeBarang = RsBrg.getString("kd_brg");
        model.addElement(kodeBarang);
    }

    RsBrg.close();
} catch (SQLException e) {
    e.printStackTrace();
}

cmbKd_Brg.setModel(model);

}

//method baca barang setelah combo barang di klik
private void detail_barang(String xkode) {
    String sql = "SELECT * FROM barang WHERE kd_brg = ?";

    try (PreparedStatement pstmt = Con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
        pstmt.setString(1, xkode);
        try (ResultSet rs = pstmt.executeQuery()) {
            if (rs.next()) {
                String kdBrg = rs.getString("kd_brg");
                String namaBrg = rs.getString("nm_brg");
                int hargaBrg = rs.getInt("harga");

                xKode.setText(kdBrg);
                txtNm_Brg.setText(namaBrg);
                txtJual.setText(Integer.toString(hargaBrg));
            } else {
                xKode.setText("");
                txtNm_Brg.setText("");
                txtJual.setText("");
            }
        }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, e);
    }
}

//method baca konsumen setelah combo konsumen di klik
private void detail_konsumen(String xkode) {
String sql = "SELECT * FROM konsumen WHERE kd_kons = ?";

        try (PreparedStatement pstmt = Con.prepareStatement(sql, ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet.CONCUR_READ_ONLY)) {
            pstmt.setString(1, xkode);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    txtNm_Kons.setText(rs.getString("nm_kons").trim());
                } else {
                    txtNm_Kons.setText("");
                }
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
}

//method set model tabel
public void inisialisasi_tabel()
{
    tblJual.setModel(tableModel);
}

//method pengkosongan isian
private void kosong()
{
    txtNoJual.setText("");
    txtNm_Brg.setText("");
    txtJual.setText("");
    txtTotal_Akhir.setText("");
}

private void aktif(boolean x)
{
    txtNoJual.setText("");
    txtNm_Brg.setText("");
    txtJual.setText("");
    txtTotal_Akhir.setText("");
}
//method kosongkan detail jual
private void kosong_detail()
{
    txtNm_Brg.setText("");
    txtJual.setText("");
    txtJml.setText("");
    txtTotal_Akhir.setText("");
}

//method set tombol on/off
private void setTombol(boolean t)
{
    cmdTambah.setEnabled(t);
    cmdSimpan.setEnabled(!t);
    cmdBatal.setEnabled(!t);
    cmdKeluar.setEnabled(t);
    cmdHapusItem.setEnabled(!t);
}

//method buat nomor jual otomatis
private void nomor_jual()
{
    try{
        stm=Con.createStatement();
        ResultSet rs=stm.executeQuery("select no_jual from jual");
        int brs=0;

        while(rs.next())
        {
            brs=rs.getRow();
        }
        if(brs==0)
            txtNoJual.setText("1");
        else
        {int nom=brs+1;
            txtNoJual.setText(Integer.toString(nom));
        }
        rs.close();
    }
    catch(SQLException e)
    {
        System.out.println("Error : "+e);
    }
}

//method simpan detail jual di tabel (temporary)
private void simpan_ditabel()
{
    try{
        String tKode=cmbKd_Brg.getSelectedItem().toString();
        String tNama=txtNm_Brg.getText();
        double hrg=Double.parseDouble(txtJual.getText());
        int jml=Integer.parseInt(txtJml.getText());
        double tot=Double.parseDouble(txtTotal.getText());
        tableModel.addRow(new Object[]{tKode,tNama,hrg,jml,tot});
        inisialisasi_tabel();
    }
    catch(Exception e)
    {
        System.out.println("Error : "+e);
    }
}

//method simpan transaksi penjualan pada table di MySql
    private void simpan_transaksi() {
        String sqlInsertJual = "INSERT INTO jual (no_jual, kd_kons, tgl_jual) VALUES (?, ?, ?)";
        String sqlInsertDjual = "INSERT INTO djual (no_jual, kd_brg, harga_jual, jml_jual) VALUES (?, ?, ?, ?)";

        PreparedStatement pstmt = null;
        try {
            // Start a transaction
            Con.setAutoCommit(false);

            String xnojual = txtNoJual.getText();
            format_tanggal();
            String xkode = cmbKd_Kons.getSelectedItem().toString();

            // Insert into jual table
            pstmt = Con.prepareStatement(sqlInsertJual);
            pstmt.setString(1, xnojual);
            pstmt.setString(2, xkode);
            pstmt.setString(3, tanggal);
            pstmt.executeUpdate();

            // Insert into djual table
            pstmt = Con.prepareStatement(sqlInsertDjual);
            for (int i = 0; i < tblJual.getRowCount(); i++) {
                String xkd = (String) tblJual.getValueAt(i, 0);
                double xhrg = (Double) tblJual.getValueAt(i, 2);
                int xjml = (Integer) tblJual.getValueAt(i, 3);

                pstmt.setString(1, xnojual);
                pstmt.setString(2, xkd);
                pstmt.setDouble(3, xhrg);
                pstmt.setInt(4, xjml);
                pstmt.addBatch();
            }
            pstmt.executeBatch();

            // Commit the transaction
            Con.commit();

            JOptionPane.showMessageDialog(null, "Data penjualan berhasil disimpan.");
        } catch (SQLException e) {
            // Rollback transaction if there is an error
            try {
                if (Con != null) {
                    Con.rollback();
                }
            } catch (SQLException ex) {
                System.out.println("Rollback failed: " + ex);
            }
            System.out.println("Error: " + e);
        } finally {
            // Restore auto-commit mode
            try {
                if (Con != null) {
                    Con.setAutoCommit(true);
                }
            } catch (SQLException ex) {
                System.out.println("Failed to restore auto-commit: " + ex);
            }

            // Close the prepared statement
            try {
                if (pstmt != null) {
                    pstmt.close();
                }
            } catch (SQLException ex) {
                System.out.println("Failed to close statement: " + ex);
            }
        }
    }

//method membuat format tanggal sesuai dengan MySQL
private void format_tanggal()
{
    String DATE_FORMAT = "yyyy-MM-dd";
    SimpleDateFormat sdf = new SimpleDateFormat(DATE_FORMAT);
    Calendar c1 = Calendar.getInstance();
    int year=c1.get(Calendar.YEAR);
    int month=c1.get(Calendar.MONTH)+1;
    int day=c1.get(Calendar.DAY_OF_MONTH);
    tanggal=Integer.toString(year)+"-"+Integer.toString(month)+"-"+Integer.toString(day);
}



    private void cmdTambahActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cmdTambahActionPerformed
        aktif(true);
        setTombol(false);
        kosong();        // TODO add your handling code here:
    }//GEN-LAST:event_cmdTambahActionPerformed

    private void cmdSimpanActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cmdSimpanActionPerformed
        Label txtKode = null;
        Label txtAlamat = null;
        Label txtKota = null;
        Label txtPos = null;
        Label txtTelpon = null;
        Label txtEmail = null;

        String tKode = txtKode.getText();
        String tNama = txtNm_Brg.getText();
        String tAlamat = txtAlamat.getText();
        String tKota = txtKota.getText();
        String tPos = txtPos.getText();
        String tTelpon = txtTelpon.getText();
        String tEmail = txtEmail.getText();

        try {
            if (edit == true) {
                String sql = "UPDATE konsumen SET nm_kons=?, alm_kons=?, kota_kons=?, kd_pos=?, phone=?, email=? WHERE kd_kons=?";
                PreparedStatement pstmt = Con.prepareStatement(sql);
                pstmt.setString(1, tNama);
                pstmt.setString(2, tAlamat);
                pstmt.setString(3, tKota);
                pstmt.setString(4, tPos);
                pstmt.setString(5, tTelpon);
                pstmt.setString(6, tEmail);
                pstmt.setString(7, tKode);
                pstmt.executeUpdate();
            } else {
                String sql = "INSERT INTO konsumen (kd_kons, nm_kons, alm_kons, kota_kons, kd_pos, phone, email) VALUES (?, ?, ?, ?, ?, ?, ?)";
                PreparedStatement pstmt = Con.prepareStatement(sql);
                pstmt.setString(1, tKode);
                pstmt.setString(2, tNama);
                pstmt.setString(3, tAlamat);
                pstmt.setString(4, tKota);
                pstmt.setString(5, tPos);
                pstmt.setString(6, tTelpon);
                pstmt.setString(7, tEmail);
                pstmt.executeUpdate();
            }

            JTable tblKons = null;
            int dataTable = 0;
            int header = 0;
            tblKons.setModel(new DefaultTableModel(dataTable, header));
            baca_data();
            aktif(false);
            setTombol(true);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_cmdSimpanActionPerformed

    private void baca_data() {
    }

    private void cmdCetakActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cmdCetakActionPerformed
        edit=true;
        aktif(true);
        setTombol(false);
//        txtKode.setEditable(false);
    }//GEN-LAST:event_cmdCetakActionPerformed

    private void cmdHapusItemActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cmdHapusItemActionPerformed
        try{
            Label txtKode = null;
            String sql="delete from konsumen where kd_kons='" + txtKode.getText()+ "'";
            stm.executeUpdate(sql);
            baca_data();

            edit=false; //set ulang edit agar form tidak masuk ke mode edit
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e);
        }
    }//GEN-LAST:event_cmdHapusItemActionPerformed

    private void cmdBatalActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cmdBatalActionPerformed
        aktif(false);
        setTombol(true);        // TODO add your handling code here:
    }//GEN-LAST:event_cmdBatalActionPerformed

    private void cmdKeluarActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cmdKeluarActionPerformed
        dispose();
    }//GEN-LAST:event_cmdKeluarActionPerformed

    private void btnPilihActionPerformed(ActionEvent evt) {//GEN-FIRST:event_btnPilihActionPerformed
    try{
        String tKode=cmbKd_Brg.getSelectedItem().toString();
        String tNama=txtNm_Brg.getText();
        double hrg=Double.parseDouble(txtJual.getText());
        int jml=Integer.parseInt(txtJml.getText());
        double tot=Double.parseDouble(txtTotal.getText());
        tableModel.addRow(new Object[]{tKode,tNama,hrg,jml,tot});
        inisialisasi_tabel();
    }
    catch(Exception e)
    {
        System.out.println("Error : "+e);
    }        // TODO add your handling code here:
    }//GEN-LAST:event_btnPilihActionPerformed

    private void cmbKd_BrgActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cmbKd_BrgActionPerformed

    }//GEN-LAST:event_cmbKd_BrgActionPerformed


    private void cmbKd_KonsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_cmbKd_KonsActionPerformed

    }//GEN-LAST:event_cmbKd_KonsActionPerformed

    private void txtNm_KonsActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txtNm_KonsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNm_KonsActionPerformed

    private void txtTotalActionPerformed(ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTotalActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frmTransaksi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(frmTransaksi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(frmTransaksi.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(frmTransaksi.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmTransaksi().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton btnPilih;
    private JComboBox<String> cmbKd_Brg;
    private JComboBox<String> cmbKd_Kons;
    private JButton cmdBatal;
    private JButton cmdCetak;
    private JButton cmdHapusItem;
    private JButton cmdKeluar;
    private JButton cmdSimpan;
    private JButton cmdTambah;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JScrollPane jScrollPane1;
    private JScrollPane jScrollPane2;
    private JTable tblJual;
    private JTextArea text;
    private JTextField txtBayar;
    private JTextField txtJml;
    private JTextField txtJual;
    private JTextField txtKembali;
    private JTextField txtNm_Brg;
    private JTextField txtNm_Kons;
    private JTextField txtNoJual;
    private JSpinner txtTgl;
    private JTextField txtTotal;
    private JTextField txtTotal_Akhir;
    private JTextField xKode;
    // End of variables declaration//GEN-END:variables
}
